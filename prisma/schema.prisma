datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}
 
generator client {
  provider = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  accounts      Account[]
  sessions      Session[]
  Exam Exam[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization[]

  orgInvitation OrgInvitation[]

  Worksheet Worksheet[]

  OrganizationMember OrganizationMember[]
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}


model Exam {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  title String
  questions Question[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete:Cascade)
}



model Question {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  examId String @db.ObjectId
  content String
  createdAt DateTime @default(now())

  exam Exam @relation(fields: [examId], references: [id], onDelete:Cascade)
}

model News {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  ownerId String? @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationMember OrganizationMember[]
  orgInvitation OrgInvitation[]

  worksheet Worksheet[]
  
  owners User? @relation(fields: [ownerId], references: [id])
}

enum MemberRole {
  owner
  member
}

model OrganizationMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  orgId String @db.ObjectId
  role MemberRole
  user User @relation(fields: [userId], references: [id])
  organizaition Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  @@unique([userId, orgId])
}

enum InvitationStatus {
  pending
  accepted
}

model OrgInvitation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  ownerId String? @db.ObjectId
  invitedId String? @db.ObjectId
  orgId String @db.ObjectId
  status InvitationStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  owner User? @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Worksheet {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  ownerId String? @db.ObjectId
  orgId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owners User? @relation(fields: [ownerId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

}